<?php

/**
 * @file
 * Hooks and callbacks for this module.
 */

use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Cache\CacheableMetadata;

use Drupal\user\Entity\User;

use Drupal\islandora\DublinCore;
use Drupal\islandora\Authentication\Provider\TokenAuth;

/**
 * Implements hook_theme().
 *
 * We supply a pattern so we can overide templates at the theme level if needed.
 * we can append a pid to a template and the new template file will be called
 * (the pids colon should be replaced with a dash).
 */
function islandora_large_image_theme($existing, $type, $theme, $path) {
  return [
    'islandora_large_image' => [
      // We can add pids to the end of this pattern in our preprocess function
      // and templates will be able to have have a pid appended to the template
      // name to overide a template on a per object basis. An example template
      // would be named islandora-basic-image--islandora-27.tpl.phps.
      'pattern' => 'islandora_large_image__',
      'variables' => ['islandora_object' => NULL],
    ],
    'islandora_large_image_print' => [
      'variables' => ['islandora_content' => NULL],
    ],
  ];
}

/**
 * Implements hook_islandora_view_print_object().
 */
function islandora_large_image_islandora_view_print_object($object) {
  if (in_array('islandora:sp_large_image_cmodel', $object->models)) {
    // Theme the image seperatly.
    $print_image = [
      '#theme' => 'image',
      '#title' => $object->label,
      '#uri' => Url::fromRoute('islandora.view_datastream_view', ['object' => $object->id, 'datastream' => 'JPG'])->toString(),
    ];
    $variables['islandora_img'] = \Drupal::service('renderer')->render($print_image);
    return [
      '#theme' => 'islandora_large_image_print',
      '#islandora_content' => $variables['islandora_img'],
    ];
  }
  return [];
}

/**
 * Implements hook_islandora_required_objects().
 */
function islandora_large_image_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'islandora_large_image');
  // Large Image Content Model.
  $large_image_content_model = $connection->repository->constructObject('islandora:sp_large_image_cmodel');
  $large_image_content_model->owner = 'fedoraAdmin';
  $large_image_content_model->label = 'Islandora Large Image Content Model';
  $large_image_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $large_image_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_large_image_ds_composite_model.xml", FALSE);
  $large_image_content_model->ingestDatastream($datastream);
  // Large Image Collection.
  $large_image_collection = $connection->repository->constructObject('islandora:sp_large_image_collection');
  $large_image_collection->owner = 'fedoraAdmin';
  $large_image_collection->label = 'Large Image Collection';
  $large_image_collection->models = 'islandora:collectionCModel';
  $large_image_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  // Collection Policy Datastream.
  $datastream = $large_image_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->label = 'Collection policy';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_large_image_collection_policy.xml", FALSE);
  $large_image_collection->ingestDatastream($datastream);
  // TN Datastream.
  $datastream = $large_image_collection->constructDatastream('TN', 'M');
  $datastream->label = 'Thumbnail';
  $datastream->mimetype = 'image/png';
  $datastream->setContentFromFile("$module_path/images/folder.png", FALSE);
  $large_image_collection->ingestDatastream($datastream);
  return [
    'islandora_large_image' => [
      'title' => 'Islandora large image',
      'objects' => [
        $large_image_content_model,
        $large_image_collection,
      ],
    ],
  ];
}

/**
 * Implements hook_xml_form_builder_forms().
 */
function islandora_large_image_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'islandora_large_image');
  return [
    'Large image MODS form' => [
      'form_file' => "$module_path/xml/islandora_large_image_form_mods.xml",
    ],
  ];
}

/**
 * Implements hook_xml_form_builder_form_associations().
 */
function islandora_large_image_xml_form_builder_form_associations() {
  return [
    'islandora_large_image_mods_form' => [
      'content_model' => 'islandora:sp_large_image_cmodel',
      'form_name' => 'Large image MODS form',
      'dsid' => 'MODS',
      'title_field' => ['titleInfo', 'title'],
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ],
  ];
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function islandora_large_image_islandora_sp_large_image_cmodel_islandora_view_object($object, $page_number, $page_size) {
  return [
    '#theme' => 'islandora_large_image',
    '#islandora_object' => $object,
  ];
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_islandora_large_image(&$variables) {
  $islandora_object = $variables['islandora_object'];
  module_load_include('inc', 'islandora', 'includes/datastream');
  module_load_include('inc', 'islandora', 'includes/utilities');
  module_load_include('inc', 'islandora', 'includes/metadata');

  $cache_meta = (new CacheableMetadata())
    ->addCacheableDependency($islandora_object)
    ->addCacheContexts([
      // XXX: Because we do a number of access checks, we make things dependent
      // on the user.
      'user',
    ]);

  // We should eventually remove the DC object and dc_array code as it only
  // exists to not break legacy implementations.
  if (isset($islandora_object['DC']) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $islandora_object['DC'])) {
    try {
      $dc = $islandora_object['DC']->content;
      $dc_object = DublinCore::importFromXMLString($dc);
    }
    catch (Exception $e) {
      $variables = [
        '@ret' => $e->getMessage(),
        '@trace' => $e->getTraceAsString(),
      ];
      \Drupal::logger('islandora_large_image')->error('Error retrieving object.<br/>Error: @ret<br/>Trace: @trace', []);
      drupal_set_message(t('Error retrieving object %s %t', ['%s' => $islandora_object->id, '%t' => $e->getMessage()]), 'error', FALSE);
    }
  }
  $variables['islandora_dublin_core'] = isset($dc_object) ? $dc_object : NULL;
  $variables['dc_array'] = isset($dc_object) ? $dc_object->asArray() : [];
  $variables['islandora_object_label'] = $islandora_object->label;
  $variables['theme_hook_suggestions'][] = 'islandora_large_image__' . str_replace(':', '_', $islandora_object->id);
  $variables['parent_collections'] = islandora_get_parents_from_rels_ext($islandora_object);
  $variables['metadata'] = islandora_retrieve_metadata_markup($islandora_object);
  $variables['description'] = islandora_retrieve_description_markup($islandora_object);

  // Thumbnail.
  if (isset($islandora_object['TN']) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $islandora_object['TN'])) {
    $thumbnail_img = [
      '#theme' => 'image',
      '#title' => $islandora_object->label,
      '#uri' => Url::fromRoute('islandora.view_datastream_view', ['object' => $islandora_object->id, 'datastream' => 'TN'])->toString(),
    ];
    $variables['islandora_thumbnail_img'] = \Drupal::service('renderer')->render($thumbnail_img);
  }
  module_load_include('inc', 'islandora', 'includes/solution_packs');

  $params = [];

  if (isset($islandora_object['JP2']) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $islandora_object['JP2'])) {
    // Get token to allow access to XACML protected datastreams.
    // If anonymous can view, pass an empty token.
    if (islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $islandora_object['JP2'], User::getAnonymousUser())) {
      $params['token'] = '';
    }
    else {
      $cache_meta->mergeCacheMaxAge(0);
      $params['token'] = TokenAuth::getObjectToken($islandora_object->id, 'JP2', 2);
    }
    $params['pid'] = $islandora_object->id;
    $params['dsid'] = 'JP2';
  }

  $viewer = islandora_get_viewer($params, 'islandora_large_image_viewers', $islandora_object);
  $variables['islandora_content'] = '';
  if ($viewer) {
    if (strpos($viewer, 'islandora-openseadragon') !== FALSE) {
      if (isset($islandora_object['JP2']) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $islandora_object['JP2'])) {
        $clip = [
          '#theme' => 'islandora_openseadragon_clipper',
          '#pid' => $islandora_object->id,
        ];
        $variables['image_clip'] = \Drupal::service('renderer')->render($clip);

      }
    }
    $variables['islandora_content'] = $viewer;
  }
  // If no viewer is configured just show the jpeg.
  elseif (isset($islandora_object['JPG']) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $islandora_object['JPG'])) {
    $islandora_content = [
      '#theme' => 'image',
      '#title' => $islandora_object->label,
      '#uri' => Url::fromRoute('islandora.view_datastream_view', ['object' => $islandora_object->id, 'datastream' => 'JPG'])->toString(),
    ];
    $variables['islandora_content'] = \Drupal::service('renderer')->render($islandora_content);
  }
  else {
    $variables['islandora_content'] = NULL;
  }

  $cache_meta->applyTo($variables);
}

/**
 * Implements hook_islandora_ingest_steps().
 */
function islandora_large_image_islandora_sp_large_image_cmodel_islandora_ingest_steps() {
  return [
    'islandora_large_image_upload' => [
      'weight' => 10,
      'type' => 'form',
      'form_class' => 'Drupal\islandora_large_image\Form\ImageUpload',
      'module' => 'islandora_large_image',
      'file' => 'includes/image_upload.form.inc',
    ],
  ];
}

/**
 * Implements hook_process_theme().
 */
function islandora_large_image_preprocess_islandora_object_print(array &$variables) {
  $object = $variables['object'];
  if (in_array('islandora:sp_large_image_cmodel', $object->models)) {
    $url = Url::fromRoute('islandora.view_object', ['object' => $object->id])->toString();
    $variables['content']['link']['#markup'] = t(
      'Persistent link: @link',
      [
        '@link' => Link::createFromRoute(
          $url,
          'islandora.view_object',
          ['object' => $object->id]
        )->toString(),
      ]
    );
    $clip = isset($variables['clip']) ? $variables['clip'] : NULL;
    if ($clip === NULL && \Drupal::service('module_handler')->moduleExists('islandora_openseadragon')) {
      if (isset($_GET['clip'])) {
        module_load_include('inc', 'islandora_openseadragon', 'includes/utilities');
        $clip_parts = islandora_openseadragon_construct_clip_url($_GET['clip']);
        $clip = $clip_parts['original_params'];
      }
    }
    $link_text = t('Print');
    $link_href = 'javascript:window.print();';
    $variables['content']['buttons'] = [
      '#access' => isset($clip),
      '#prefix' => '<div>',
      '#suffix' => '</div></br>',
      '#weight' => -5,
      'print' => [
        '#prefix' => '<strong>',
        '#type' => 'html_tag',
        '#tag' => 'a',
        '#attributes' => ['href' => $link_href],
        '#value' => $link_text,
        '#suffix' => '</strong>',
        '#weight' => -5,
      ],
      '0' => [
        '#markup' => ' | ',
        '#weight' => -5,
      ],
      'download_clip' => [
        '#prefix' => '<strong>',
        '#markup' => Link::createFromRoute(
          t('Download Image'),
          'islandora_openseadragon.download_clip',
          ['object' => $object->id],
          ['query' => ['clip' => $clip]]
        )->toString(),
        '#suffix' => '</strong>',
        '#weight' => -5,
      ],
    ];
  }
}

/**
 * Implements hook_CMODEL_islandora_derivative().
 */
function islandora_large_image_islandora_sp_large_image_cmodel_islandora_derivative() {
  $mod_path = drupal_get_path('module', 'islandora_large_image');

  return [
    [
      'source_dsid' => 'OBJ',
      'destination_dsid' => 'TN',
      'weight' => 0,
      'function' => [
        'islandora_large_image_create_tn_derivative',
      ],
      'file' => "$mod_path/includes/derivatives.inc",
    ],
    [
      'source_dsid' => 'OBJ',
      'destination_dsid' => 'JPG',
      'weight' => 1,
      'function' => [
        'islandora_large_image_create_jpg_derivative',
      ],
      'file' => "$mod_path/includes/derivatives.inc",
    ],
    [
      'source_dsid' => 'OBJ',
      'destination_dsid' => 'JP2',
      'weight' => 2,
      'function' => [
        'islandora_large_image_create_jp2_derivative',
      ],
      'file' => "$mod_path/includes/derivatives.inc",
    ],
  ];
}
